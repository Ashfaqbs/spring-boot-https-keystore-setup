self-signed certificates.

Note:
 self-signed certificates may be used for internal testing, development, or isolated environments.
They provide encryption but lack the trust and validation offered by certificates issued by trusted CAs.



1 JDK must be installed 
C:\Users\ashfa\OneDrive\Desktop\My-Learning\Java\JavaLab-workspace>java -version
java version "21.0.2" 2024-01-16 LTS
Java(TM) SE Runtime Environment (build 21.0.2+13-LTS-58)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.2+13-LTS-58, mixed mode, sharing)

expected issue of keytool 
C:\Users\ashfa\OneDrive\Desktop\My-Learning\Java\JavaLab-workspace>keytool -help

'keytool' is not recognized as an internal or external command,
operable program or batch file.

execute keytool command like below 

C:\Users\ashfa\OneDrive\Desktop\My-Learning\Java\JavaLab-workspace>"C:\Program Files\Java\jdk-21\bin\keytool" -help
Key and Certificate Management Tool

Commands:

 -certreq            Generates a certificate request
 -changealias        Changes an entry's alias
 -printcert          Prints the content of a certificate
 -printcertreq       Prints the content of a certificate request
Enter the distinguished name. Provide a single dot (.) to leave a sub-component empty or press ENTER to use the default value in braces.     

C:\Users\ashfa\OneDrive\Desktop\My-Learning\Java\JavaLab-workspace>

Note this command does not work in Windows powershell if using Windows execute the command in CMD 

C:\Users\ashfa\OneDrive\Desktop\My-Learning\Java\JavaLab-workspace>

"C:\Program Files\Java\jdk-21\bin\keytool" -genkey -alias springtesting -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.jks -validity 3650

Command explaination 

-alias springtesting: 
Assigns an alias to the key pair. This alias is used to reference the key pair within the keystore.

-storetype PKCS12:

This option specifies the type of keystore that will be created. In this case, PKCS12 is used, which is a widely supported standard format for storing cryptographic keys and certificates. It's often preferred over the older JKS (Java KeyStore) format for its better security features and compatibility with other systems.

-keyalg RSA:

This option specifies the algorithm to be used for generating the key pair. In your command, RSA (Rivest-Shamir-Adleman) is chosen, which is a commonly used algorithm for public-key cryptography. RSA keys are widely supported and considered secure for various cryptographic operations.

-keysize 2048:

This option specifies the size of the key to be generated, in bits. In your command, a key size of 2048 bits is chosen, which is considered sufficient for most purposes. Larger key sizes offer increased security but also require more computational resources.
-keystore keystore.jks:

This option specifies the name and location of the keystore file to be created. In your command, the keystore file will be named keystore.jks and will be located in the current directory (C:\Users\ashfa\OneDrive\Desktop\My-Learning\Java\JavaLab-workspace).

-validity 3650:

This option specifies the validity period of the certificate generated, in days. In your command, a validity period of 3650 days (equivalent to 10 years) is chosen. This means that the certificate will be considered valid for SSL/TLS connections for the specified duration.
These options allow you to customize various aspects of the key pair and certificate generated by keytool, such as the type of keystore, key algorithm, key size, keystore filename and location, and validity period. By choosing appropriate values for these options, you can tailor the generated certificate to meet your specific requirements in terms of security, compatibility, and lifespan.


here trying changing alias for every jks file.



Now running the command 

keytool -genkey -alias springtesting -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.jks -validity 3650
#but our keytool is in "C:\Program Files\Java\jdk-21\bin\keytool" so execute the command like 
C:\Users\ashfa>"C:\Program Files\Java\jdk-21\bin\keytool" -genkey -alias springtesting -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.jks -validity 3650
Enter keystore password: //save the password as its required to give in springboot project. here we had given Sample123 for testing

Re-enter new password:

Enter the distinguished name. Provide a single dot (.) to leave a sub-component empty or press ENTER to use the default value in braces.
What is your first and last name?
  [Unknown]:  Ashfaq or localhost
What is the name of your organizational unit?
  [Unknown]:  Development
What is the name of your organization?
  [Unknown]:  My Personal Projects
What is the name of your City or Locality?
  [Unknown]:  Bangalore
What is the name of your State or Province?
  [Unknown]:  Karnataka
What is the two-letter country code for this unit?
  [Unknown]:  IN
Is CN=Ashfaq or localhost, OU=Development, O=My Personal Projects, L=Bangalore, ST=Karnataka, C=IN correct?
  [no]:  yes

Generating 2,048 bit RSA key pair and self-signed certificate (SHA384withRSA) with a validity of 3,650 days
        for: CN=Ashfaq or localhost, OU=Development, O=My Personal Projects, L=Bangalore, ST=Karnataka, C=IN



"C:\Users\ashfa\keystore.jks" this is our file , either we can give this path or put the file in project>resources folder 


Application.prop file of our springboot app

SYNTAX :

server.ssl.key-store=classpath:keystore.jks
server.ssl.key-store-password=<your-keystore-password>
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=spring


Our Values 

#server.ssl.key-store=file:C:\Users\ashfa\keystore.jks

#if we provide the jks file from resources folder we can specify like below
server.ssl.key-store=classpath:keystore.jks

#This property specifies the location of the keystore file containing the SSL certificate and private key. In this case, the keystore file is expected to be located in the classpath, #specifically in the resources directory of your Spring Boot application. The prefix classpath: indicates that the file should be found in the classpath.

server.ssl.key-store-password=Sample123
#This property specifies the password required to access the keystore file

server.ssl.key-store-type=PKCS12
#This property specifies the type of keystore file. In this case, it's set to PKCS12, which is a standardized format for storing cryptographic keys and certificates

server.ssl.key-alias=springtesting
#This property specifies the alias of the key/certificate entry in the keystore that should be used. If your keystore contains multiple keys or certificates, this alias identifies the #specific one to use for SSL/TLS.



Run the springboot project 

in logs you will see 


[2m2024-04-06T16:38:34.735+05:30[0;39m [32m INFO[0;39m [35m11448[0;39m [2m---[0;39m [2m[Spring-boot-Demo] [           main][0;39m [2m[0;39m[36mo.a.t.util.net.NioEndpoint.certificate  [0;39m [2m:[0;39m Connector [https-jsse-nio-8080], TLS virtual host [_default_], certificate type [UNDEFINED] configured from keystore [C:\Users\ashfa\.keystore] using alias [spring] with trust store [null]



call the api - https://127.0.0.1:8080/name or https://localhost:8080/name




Take Aways:



What We're Doing:

Generating a Keystore and Key Pair:

With the -genkey option, we're instructing keytool to generate a new keystore and key pair.
The keystore is a file that securely stores cryptographic keys and certificates.
The key pair consists of a public key and a private key. The private key is kept confidential and is used for decryption, while the public key is distributed and used for encryption.


Why It's Important:
SSL/TLS Security:

The generated keystore and key pair are essential components of SSL/TLS security.
The keystore holds the SSL certificate, which verifies the identity of your server to clients.
The key pair is used to encrypt and decrypt data exchanged between the server and clients, ensuring confidentiality and integrity.
HTTPS Protocol:

By configuring your server to use the SSL/TLS certificate stored in the keystore, you enable secure communication via HTTPS (HTTP Secure) protocol.
HTTPS encrypts data transmitted between clients and servers, protecting sensitive information such as login credentials, payment details, and personal data.


Industry Practices:
Certificate Authorities (CAs):

In production environments, organizations typically obtain SSL/TLS certificates from trusted Certificate Authorities (CAs) rather than creating self-signed certificates.
CAs validate the identity of the certificate holder and issue trusted certificates, enhancing trust and security for website visitors.
Certificate Lifespan:

Industry standards and best practices recommend renewing SSL/TLS certificates periodically to maintain security and compliance.
As of industry regulations like CA/Browser Forum guidelines, publicly trusted SSL/TLS certificates have a maximum validity period of 398 days.
By generating a keystore and self-signed certificate with keytool, you're laying the foundation for implementing SSL/TLS security in our applications, ensuring secure communication over the internet and adherence to industry standards and best practices.

while self-signed certificates are suitable for certain scenarios like development and testing, industry-standard practices often involve obtaining certificates from trusted Certificate Authorities (CAs) for publicly accessible websites and services. These certificates provide higher levels of trust, security, and compatibility with web browsers and operating systems.











